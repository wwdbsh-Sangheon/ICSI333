#Procedure to print the value of the non-negative integer stored in $17.
.data
cstack: .byte 0:20
newline: .asciiz "\n"
outbuf: .byte 0:2
.text
print_val: sw $31, 0($sp) #Save $31 on the system stack.
addi $sp, $sp, -4
la $15, cstack #Initialize char stack pointer.
#Obtain successive digits and push them on stack.
li $19, 10 #For division.
push_dig: rem $3, $17, $19 #Get least significant digit in $3.
addi $3, $3, 48 #Convert digit to its ASCII code.
jal push #Push char in $3 on stack.
div $17, $17, $19 #Eliminate least significant digit.
bgtz $17, push_dig
(over)
1
#All digits (in character form) are now in the stack. Pop and print the digits.
la $16, cstack #To know when to stop popping.
print_dig: beq $15, $16, over
jal pop #pop returns the character in $3.
sb $3, outbuf #Move the character to the output buffer.
la $a0, outbuf
li $v0, 4 #print_string command.
syscall
j print_dig
over: la $a0, newline #Print newline.
li $v0, 4
syscall
lw $31, 4($sp) #Restore $31 and pop stack.
addi $sp, $sp, 4
jr $31 #return to caller.
push: sb $3, 0($15) #$15 used as stack pointer for char stack.
addi $15, $15, 1 #Increment char stack pointer by 1.
jr $31
pop: addi $15, $15, -1
lbu $3, 0($15)
jr $31
